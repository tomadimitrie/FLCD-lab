var -> (-1, -1)
nr -> (24, 0)
: -> (-1, -1)
Int -> (-1, -1)
= -> (-1, -1)
read -> (-1, -1)
( -> (-1, -1)
) -> (-1, -1)
var -> (-1, -1)
d -> (0, 0)
: -> (-1, -1)
Int -> (-1, -1)
= -> (-1, -1)
2 -> (50, 0)
var -> (-1, -1)
isPrime -> (29, 0)
: -> (-1, -1)
Bool -> (96, 0)
= -> (-1, -1)
true -> (48, 0)
while -> (-1, -1)
d -> (0, 0)
< -> (-1, -1)
nr -> (24, 0)
/ -> (-1, -1)
2 -> (50, 0)
{ -> (-1, -1)
if -> (-1, -1)
nr -> (24, 0)
% -> (-1, -1)
d -> (0, 0)
== -> (-1, -1)
0 -> (48, 0)
{ -> (-1, -1)
isPrime -> (29, 0)
= -> (-1, -1)
false -> (23, 0)
} -> (-1, -1)
d -> (0, 0)
+= -> (-1, -1)
1 -> (49, 0)
} -> (-1, -1)
write -> (-1, -1)
( -> (-1, -1)
isPrime -> (29, 0)
) -> (-1, -1)